node {
   def mvnHome
   def server =Artifactory.server 'artifactory'
  //Server configuration for anisible
  def remote = [:]
            remote.host = 'oildr55952dns0.eastus2.cloudapp.azure.com'
            remote.user = "devopsinfra"
            remote.password = "Applestore12\$5"
            remote.allowAnyHosts = true
     
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
       git 'https://github.com/bharathuppiretla/spring-petclinic.git' 
      // Get the Maven tool.
      // ** NOTE: This 'mvn' Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool 'mvn'
   }
   //sonar
   //stage('Sonar scan execution') {
            // Run the sonar scan
           
                    //def mvnHome = tool 'mvn'
                //    withSonarQubeEnv {

                  //      sh "'${mvnHome}/bin/mvn'  verify sonar:sonar -Dintegration-tests.skip=true -Dmaven.test.failure.ignore=true"
            //}
        //}
   //sonar
   
   stage('Quality Analysis') {
        withSonarQubeEnv('sonar') {
        sh 'mvn clean package sonar:sonar'
        }
    }
    
    stage("Quality Gate"){
       timeout(time: 1, unit: 'HOURS') { 
           def qg = waitForQualityGate() 
            if (qg.status != 'OK') {
                currentBuild.status='FAILURE'
               error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
        }
    }
   
   
   stage('Build') {
      // Run the maven build
      withEnv(["MVN_HOME=$mvnHome"]) {
         if (isUnix()) {
            sh '"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package'
         } else {
            bat(/"%MVN_HOME%\bin\mvn" -Dmaven.test.failure.ignore clean package/)
         }
      }
   }
   stage('Artifactory upload') { 
        def uploadSpec = """ 
        {  
		"files": [ { "pattern": "/var/lib/jenkins/workspace/example_pipeline/target/*.jar", "target": "example-repo-local" } ]  
        }"""  
        server.upload(uploadSpec) 
        }
  
  stage('Petclinic Docker Image') {
   
sh "sudo docker build -t bharathuppiretla/petclinic ."
sh "sudo docker push bharathuppiretla/petclinic"

  
}
stage('composeup')
{
sh "sudo docker-compose up -d --build"
sh "sudo docker pull bharathuppiretla/petclinic"
}

//stage(copy ansible playbok)
//{
//}
 stage('Run ansible playbook') {
           
                
               sshPut remote: remote, from: '~/splaybook.yaml', into: '/home/devopsinfra/ansible/splaybook.yaml'
               sshCommand remote: remote, command: "cd /home/devopsinfra/ansible/splaybook.yaml ; ansible-playbook  splaybook.yaml "
        }

 stage('MAIL'){
        mail bcc: '', body: 'Build Failed', cc: '', from: '', replyTo: '', subject: 'Build Failed', to: 'bharathuppiretlagmail.com' 
        }
   
}
